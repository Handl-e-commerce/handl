// Code generated by ent, DO NOT EDIT.

package ent

import (
	"handl-server/ent/category"
	"handl-server/ent/schema"
	"handl-server/ent/user"
	"handl-server/ent/vendor"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	categoryFields := schema.Category{}.Fields()
	_ = categoryFields
	// categoryDescCreatedAt is the schema descriptor for created_at field.
	categoryDescCreatedAt := categoryFields[3].Descriptor()
	// category.DefaultCreatedAt holds the default value on creation for the created_at field.
	category.DefaultCreatedAt = categoryDescCreatedAt.Default.(func() time.Time)
	// categoryDescUpdatedAt is the schema descriptor for updated_at field.
	categoryDescUpdatedAt := categoryFields[4].Descriptor()
	// category.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	category.DefaultUpdatedAt = categoryDescUpdatedAt.Default.(func() time.Time)
	// category.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	category.UpdateDefaultUpdatedAt = categoryDescUpdatedAt.UpdateDefault.(func() time.Time)
	// categoryDescID is the schema descriptor for id field.
	categoryDescID := categoryFields[0].Descriptor()
	// category.IDValidator is a validator for the "id" field. It is called by the builders before save.
	category.IDValidator = categoryDescID.Validators[0].(func(int) error)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescUUID is the schema descriptor for uuid field.
	userDescUUID := userFields[0].Descriptor()
	// user.DefaultUUID holds the default value on creation for the uuid field.
	user.DefaultUUID = userDescUUID.Default.(func() string)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[1].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescFirstName is the schema descriptor for first_name field.
	userDescFirstName := userFields[2].Descriptor()
	// user.FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	user.FirstNameValidator = userDescFirstName.Validators[0].(func(string) error)
	// userDescLastName is the schema descriptor for last_name field.
	userDescLastName := userFields[3].Descriptor()
	// user.LastNameValidator is a validator for the "last_name" field. It is called by the builders before save.
	user.LastNameValidator = userDescLastName.Validators[0].(func(string) error)
	// userDescBusinessName is the schema descriptor for business_name field.
	userDescBusinessName := userFields[4].Descriptor()
	// user.BusinessNameValidator is a validator for the "business_name" field. It is called by the builders before save.
	user.BusinessNameValidator = userDescBusinessName.Validators[0].(func(string) error)
	// userDescPhoneNumber is the schema descriptor for phone_number field.
	userDescPhoneNumber := userFields[5].Descriptor()
	// user.PhoneNumberValidator is a validator for the "phone_number" field. It is called by the builders before save.
	user.PhoneNumberValidator = userDescPhoneNumber.Validators[0].(func(string) error)
	// userDescAddress is the schema descriptor for address field.
	userDescAddress := userFields[6].Descriptor()
	// user.AddressValidator is a validator for the "address" field. It is called by the builders before save.
	user.AddressValidator = userDescAddress.Validators[0].(func(string) error)
	// userDescCity is the schema descriptor for city field.
	userDescCity := userFields[7].Descriptor()
	// user.CityValidator is a validator for the "city" field. It is called by the builders before save.
	user.CityValidator = userDescCity.Validators[0].(func(string) error)
	// userDescState is the schema descriptor for state field.
	userDescState := userFields[8].Descriptor()
	// user.StateValidator is a validator for the "state" field. It is called by the builders before save.
	user.StateValidator = userDescState.Validators[0].(func(string) error)
	// userDescZipcode is the schema descriptor for zipcode field.
	userDescZipcode := userFields[9].Descriptor()
	// user.ZipcodeValidator is a validator for the "zipcode" field. It is called by the builders before save.
	user.ZipcodeValidator = userDescZipcode.Validators[0].(func(string) error)
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[11].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	// userDescIsVerified is the schema descriptor for is_verified field.
	userDescIsVerified := userFields[13].Descriptor()
	// user.DefaultIsVerified holds the default value on creation for the is_verified field.
	user.DefaultIsVerified = userDescIsVerified.Default.(bool)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[16].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[17].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	vendorFields := schema.Vendor{}.Fields()
	_ = vendorFields
	// vendorDescUUID is the schema descriptor for uuid field.
	vendorDescUUID := vendorFields[0].Descriptor()
	// vendor.DefaultUUID holds the default value on creation for the uuid field.
	vendor.DefaultUUID = vendorDescUUID.Default.(func() string)
	// vendorDescName is the schema descriptor for name field.
	vendorDescName := vendorFields[1].Descriptor()
	// vendor.NameValidator is a validator for the "name" field. It is called by the builders before save.
	vendor.NameValidator = vendorDescName.Validators[0].(func(string) error)
	// vendorDescDescription is the schema descriptor for description field.
	vendorDescDescription := vendorFields[2].Descriptor()
	// vendor.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	vendor.DescriptionValidator = vendorDescDescription.Validators[0].(func(string) error)
	// vendorDescCreatedAt is the schema descriptor for created_at field.
	vendorDescCreatedAt := vendorFields[14].Descriptor()
	// vendor.DefaultCreatedAt holds the default value on creation for the created_at field.
	vendor.DefaultCreatedAt = vendorDescCreatedAt.Default.(func() time.Time)
	// vendorDescUpdatedAt is the schema descriptor for updated_at field.
	vendorDescUpdatedAt := vendorFields[15].Descriptor()
	// vendor.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	vendor.DefaultUpdatedAt = vendorDescUpdatedAt.Default.(func() time.Time)
	// vendor.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	vendor.UpdateDefaultUpdatedAt = vendorDescUpdatedAt.UpdateDefault.(func() time.Time)
}
