// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"handl-server/ent/vendor"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VendorCreate is the builder for creating a Vendor entity.
type VendorCreate struct {
	config
	mutation *VendorMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (vc *VendorCreate) SetUUID(s string) *VendorCreate {
	vc.mutation.SetUUID(s)
	return vc
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (vc *VendorCreate) SetNillableUUID(s *string) *VendorCreate {
	if s != nil {
		vc.SetUUID(*s)
	}
	return vc
}

// SetName sets the "name" field.
func (vc *VendorCreate) SetName(s string) *VendorCreate {
	vc.mutation.SetName(s)
	return vc
}

// SetDescription sets the "description" field.
func (vc *VendorCreate) SetDescription(s string) *VendorCreate {
	vc.mutation.SetDescription(s)
	return vc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vc *VendorCreate) SetNillableDescription(s *string) *VendorCreate {
	if s != nil {
		vc.SetDescription(*s)
	}
	return vc
}

// SetWebsite sets the "website" field.
func (vc *VendorCreate) SetWebsite(s string) *VendorCreate {
	vc.mutation.SetWebsite(s)
	return vc
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (vc *VendorCreate) SetNillableWebsite(s *string) *VendorCreate {
	if s != nil {
		vc.SetWebsite(*s)
	}
	return vc
}

// SetKeywords sets the "keywords" field.
func (vc *VendorCreate) SetKeywords(s string) *VendorCreate {
	vc.mutation.SetKeywords(s)
	return vc
}

// SetNillableKeywords sets the "keywords" field if the given value is not nil.
func (vc *VendorCreate) SetNillableKeywords(s *string) *VendorCreate {
	if s != nil {
		vc.SetKeywords(*s)
	}
	return vc
}

// SetCategories sets the "categories" field.
func (vc *VendorCreate) SetCategories(s string) *VendorCreate {
	vc.mutation.SetCategories(s)
	return vc
}

// SetNillableCategories sets the "categories" field if the given value is not nil.
func (vc *VendorCreate) SetNillableCategories(s *string) *VendorCreate {
	if s != nil {
		vc.SetCategories(*s)
	}
	return vc
}

// SetSubcategories sets the "subcategories" field.
func (vc *VendorCreate) SetSubcategories(s string) *VendorCreate {
	vc.mutation.SetSubcategories(s)
	return vc
}

// SetNillableSubcategories sets the "subcategories" field if the given value is not nil.
func (vc *VendorCreate) SetNillableSubcategories(s *string) *VendorCreate {
	if s != nil {
		vc.SetSubcategories(*s)
	}
	return vc
}

// SetPeople sets the "people" field.
func (vc *VendorCreate) SetPeople(s []string) *VendorCreate {
	vc.mutation.SetPeople(s)
	return vc
}

// SetAddress sets the "address" field.
func (vc *VendorCreate) SetAddress(s string) *VendorCreate {
	vc.mutation.SetAddress(s)
	return vc
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (vc *VendorCreate) SetNillableAddress(s *string) *VendorCreate {
	if s != nil {
		vc.SetAddress(*s)
	}
	return vc
}

// SetCity sets the "city" field.
func (vc *VendorCreate) SetCity(s string) *VendorCreate {
	vc.mutation.SetCity(s)
	return vc
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (vc *VendorCreate) SetNillableCity(s *string) *VendorCreate {
	if s != nil {
		vc.SetCity(*s)
	}
	return vc
}

// SetState sets the "state" field.
func (vc *VendorCreate) SetState(s string) *VendorCreate {
	vc.mutation.SetState(s)
	return vc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (vc *VendorCreate) SetNillableState(s *string) *VendorCreate {
	if s != nil {
		vc.SetState(*s)
	}
	return vc
}

// SetZipcode sets the "zipcode" field.
func (vc *VendorCreate) SetZipcode(s string) *VendorCreate {
	vc.mutation.SetZipcode(s)
	return vc
}

// SetNillableZipcode sets the "zipcode" field if the given value is not nil.
func (vc *VendorCreate) SetNillableZipcode(s *string) *VendorCreate {
	if s != nil {
		vc.SetZipcode(*s)
	}
	return vc
}

// SetPhoneNumber sets the "phone_number" field.
func (vc *VendorCreate) SetPhoneNumber(s string) *VendorCreate {
	vc.mutation.SetPhoneNumber(s)
	return vc
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (vc *VendorCreate) SetNillablePhoneNumber(s *string) *VendorCreate {
	if s != nil {
		vc.SetPhoneNumber(*s)
	}
	return vc
}

// SetEmail sets the "email" field.
func (vc *VendorCreate) SetEmail(s string) *VendorCreate {
	vc.mutation.SetEmail(s)
	return vc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (vc *VendorCreate) SetNillableEmail(s *string) *VendorCreate {
	if s != nil {
		vc.SetEmail(*s)
	}
	return vc
}

// SetCreatedAt sets the "created_at" field.
func (vc *VendorCreate) SetCreatedAt(t time.Time) *VendorCreate {
	vc.mutation.SetCreatedAt(t)
	return vc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vc *VendorCreate) SetNillableCreatedAt(t *time.Time) *VendorCreate {
	if t != nil {
		vc.SetCreatedAt(*t)
	}
	return vc
}

// SetUpdatedAt sets the "updated_at" field.
func (vc *VendorCreate) SetUpdatedAt(t time.Time) *VendorCreate {
	vc.mutation.SetUpdatedAt(t)
	return vc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vc *VendorCreate) SetNillableUpdatedAt(t *time.Time) *VendorCreate {
	if t != nil {
		vc.SetUpdatedAt(*t)
	}
	return vc
}

// Mutation returns the VendorMutation object of the builder.
func (vc *VendorCreate) Mutation() *VendorMutation {
	return vc.mutation
}

// Save creates the Vendor in the database.
func (vc *VendorCreate) Save(ctx context.Context) (*Vendor, error) {
	vc.defaults()
	return withHooks(ctx, vc.sqlSave, vc.mutation, vc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VendorCreate) SaveX(ctx context.Context) *Vendor {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VendorCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VendorCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vc *VendorCreate) defaults() {
	if _, ok := vc.mutation.UUID(); !ok {
		v := vendor.DefaultUUID()
		vc.mutation.SetUUID(v)
	}
	if _, ok := vc.mutation.CreatedAt(); !ok {
		v := vendor.DefaultCreatedAt()
		vc.mutation.SetCreatedAt(v)
	}
	if _, ok := vc.mutation.UpdatedAt(); !ok {
		v := vendor.DefaultUpdatedAt()
		vc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *VendorCreate) check() error {
	if _, ok := vc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "Vendor.uuid"`)}
	}
	if _, ok := vc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Vendor.name"`)}
	}
	if v, ok := vc.mutation.Name(); ok {
		if err := vendor.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Vendor.name": %w`, err)}
		}
	}
	if v, ok := vc.mutation.Description(); ok {
		if err := vendor.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Vendor.description": %w`, err)}
		}
	}
	if _, ok := vc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Vendor.created_at"`)}
	}
	if _, ok := vc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Vendor.updated_at"`)}
	}
	return nil
}

func (vc *VendorCreate) sqlSave(ctx context.Context) (*Vendor, error) {
	if err := vc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	vc.mutation.id = &_node.ID
	vc.mutation.done = true
	return _node, nil
}

func (vc *VendorCreate) createSpec() (*Vendor, *sqlgraph.CreateSpec) {
	var (
		_node = &Vendor{config: vc.config}
		_spec = sqlgraph.NewCreateSpec(vendor.Table, sqlgraph.NewFieldSpec(vendor.FieldID, field.TypeInt))
	)
	if value, ok := vc.mutation.UUID(); ok {
		_spec.SetField(vendor.FieldUUID, field.TypeString, value)
		_node.UUID = value
	}
	if value, ok := vc.mutation.Name(); ok {
		_spec.SetField(vendor.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := vc.mutation.Description(); ok {
		_spec.SetField(vendor.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := vc.mutation.Website(); ok {
		_spec.SetField(vendor.FieldWebsite, field.TypeString, value)
		_node.Website = &value
	}
	if value, ok := vc.mutation.Keywords(); ok {
		_spec.SetField(vendor.FieldKeywords, field.TypeString, value)
		_node.Keywords = &value
	}
	if value, ok := vc.mutation.Categories(); ok {
		_spec.SetField(vendor.FieldCategories, field.TypeString, value)
		_node.Categories = &value
	}
	if value, ok := vc.mutation.Subcategories(); ok {
		_spec.SetField(vendor.FieldSubcategories, field.TypeString, value)
		_node.Subcategories = &value
	}
	if value, ok := vc.mutation.People(); ok {
		_spec.SetField(vendor.FieldPeople, field.TypeJSON, value)
		_node.People = value
	}
	if value, ok := vc.mutation.Address(); ok {
		_spec.SetField(vendor.FieldAddress, field.TypeString, value)
		_node.Address = &value
	}
	if value, ok := vc.mutation.City(); ok {
		_spec.SetField(vendor.FieldCity, field.TypeString, value)
		_node.City = &value
	}
	if value, ok := vc.mutation.State(); ok {
		_spec.SetField(vendor.FieldState, field.TypeString, value)
		_node.State = &value
	}
	if value, ok := vc.mutation.Zipcode(); ok {
		_spec.SetField(vendor.FieldZipcode, field.TypeString, value)
		_node.Zipcode = &value
	}
	if value, ok := vc.mutation.PhoneNumber(); ok {
		_spec.SetField(vendor.FieldPhoneNumber, field.TypeString, value)
		_node.PhoneNumber = &value
	}
	if value, ok := vc.mutation.Email(); ok {
		_spec.SetField(vendor.FieldEmail, field.TypeString, value)
		_node.Email = &value
	}
	if value, ok := vc.mutation.CreatedAt(); ok {
		_spec.SetField(vendor.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vc.mutation.UpdatedAt(); ok {
		_spec.SetField(vendor.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// VendorCreateBulk is the builder for creating many Vendor entities in bulk.
type VendorCreateBulk struct {
	config
	err      error
	builders []*VendorCreate
}

// Save creates the Vendor entities in the database.
func (vcb *VendorCreateBulk) Save(ctx context.Context) ([]*Vendor, error) {
	if vcb.err != nil {
		return nil, vcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Vendor, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VendorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VendorCreateBulk) SaveX(ctx context.Context) []*Vendor {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VendorCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VendorCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}
