// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"handl-server/ent/predicate"
	"handl-server/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUUID sets the "uuid" field.
func (uu *UserUpdate) SetUUID(s string) *UserUpdate {
	uu.mutation.SetUUID(s)
	return uu
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUUID(s *string) *UserUpdate {
	if s != nil {
		uu.SetUUID(*s)
	}
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// SetFirstName sets the "first_name" field.
func (uu *UserUpdate) SetFirstName(s string) *UserUpdate {
	uu.mutation.SetFirstName(s)
	return uu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFirstName(s *string) *UserUpdate {
	if s != nil {
		uu.SetFirstName(*s)
	}
	return uu
}

// SetLastName sets the "last_name" field.
func (uu *UserUpdate) SetLastName(s string) *UserUpdate {
	uu.mutation.SetLastName(s)
	return uu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastName(s *string) *UserUpdate {
	if s != nil {
		uu.SetLastName(*s)
	}
	return uu
}

// SetBusinessName sets the "business_name" field.
func (uu *UserUpdate) SetBusinessName(s string) *UserUpdate {
	uu.mutation.SetBusinessName(s)
	return uu
}

// SetNillableBusinessName sets the "business_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBusinessName(s *string) *UserUpdate {
	if s != nil {
		uu.SetBusinessName(*s)
	}
	return uu
}

// SetPhoneNumber sets the "phone_number" field.
func (uu *UserUpdate) SetPhoneNumber(s string) *UserUpdate {
	uu.mutation.SetPhoneNumber(s)
	return uu
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhoneNumber(s *string) *UserUpdate {
	if s != nil {
		uu.SetPhoneNumber(*s)
	}
	return uu
}

// SetAddress sets the "address" field.
func (uu *UserUpdate) SetAddress(s string) *UserUpdate {
	uu.mutation.SetAddress(s)
	return uu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAddress(s *string) *UserUpdate {
	if s != nil {
		uu.SetAddress(*s)
	}
	return uu
}

// SetCity sets the "city" field.
func (uu *UserUpdate) SetCity(s string) *UserUpdate {
	uu.mutation.SetCity(s)
	return uu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCity(s *string) *UserUpdate {
	if s != nil {
		uu.SetCity(*s)
	}
	return uu
}

// SetState sets the "state" field.
func (uu *UserUpdate) SetState(s string) *UserUpdate {
	uu.mutation.SetState(s)
	return uu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (uu *UserUpdate) SetNillableState(s *string) *UserUpdate {
	if s != nil {
		uu.SetState(*s)
	}
	return uu
}

// SetZipcode sets the "zipcode" field.
func (uu *UserUpdate) SetZipcode(s string) *UserUpdate {
	uu.mutation.SetZipcode(s)
	return uu
}

// SetNillableZipcode sets the "zipcode" field if the given value is not nil.
func (uu *UserUpdate) SetNillableZipcode(s *string) *UserUpdate {
	if s != nil {
		uu.SetZipcode(*s)
	}
	return uu
}

// SetCategories sets the "categories" field.
func (uu *UserUpdate) SetCategories(s []string) *UserUpdate {
	uu.mutation.SetCategories(s)
	return uu
}

// AppendCategories appends s to the "categories" field.
func (uu *UserUpdate) AppendCategories(s []string) *UserUpdate {
	uu.mutation.AppendCategories(s)
	return uu
}

// ClearCategories clears the value of the "categories" field.
func (uu *UserUpdate) ClearCategories() *UserUpdate {
	uu.mutation.ClearCategories()
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePassword(s *string) *UserUpdate {
	if s != nil {
		uu.SetPassword(*s)
	}
	return uu
}

// SetSavedVendors sets the "saved_vendors" field.
func (uu *UserUpdate) SetSavedVendors(s []string) *UserUpdate {
	uu.mutation.SetSavedVendors(s)
	return uu
}

// AppendSavedVendors appends s to the "saved_vendors" field.
func (uu *UserUpdate) AppendSavedVendors(s []string) *UserUpdate {
	uu.mutation.AppendSavedVendors(s)
	return uu
}

// ClearSavedVendors clears the value of the "saved_vendors" field.
func (uu *UserUpdate) ClearSavedVendors() *UserUpdate {
	uu.mutation.ClearSavedVendors()
	return uu
}

// SetIsVerified sets the "is_verified" field.
func (uu *UserUpdate) SetIsVerified(b bool) *UserUpdate {
	uu.mutation.SetIsVerified(b)
	return uu
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsVerified(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsVerified(*b)
	}
	return uu
}

// SetVerificationToken sets the "verification_token" field.
func (uu *UserUpdate) SetVerificationToken(s string) *UserUpdate {
	uu.mutation.SetVerificationToken(s)
	return uu
}

// SetNillableVerificationToken sets the "verification_token" field if the given value is not nil.
func (uu *UserUpdate) SetNillableVerificationToken(s *string) *UserUpdate {
	if s != nil {
		uu.SetVerificationToken(*s)
	}
	return uu
}

// ClearVerificationToken clears the value of the "verification_token" field.
func (uu *UserUpdate) ClearVerificationToken() *UserUpdate {
	uu.mutation.ClearVerificationToken()
	return uu
}

// SetTokenExpiration sets the "token_expiration" field.
func (uu *UserUpdate) SetTokenExpiration(t time.Time) *UserUpdate {
	uu.mutation.SetTokenExpiration(t)
	return uu
}

// SetNillableTokenExpiration sets the "token_expiration" field if the given value is not nil.
func (uu *UserUpdate) SetNillableTokenExpiration(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetTokenExpiration(*t)
	}
	return uu
}

// ClearTokenExpiration clears the value of the "token_expiration" field.
func (uu *UserUpdate) ClearTokenExpiration() *UserUpdate {
	uu.mutation.ClearTokenExpiration()
	return uu
}

// SetCreatedAt sets the "created_at" field.
func (uu *UserUpdate) SetCreatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetCreatedAt(t)
	return uu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetCreatedAt(*t)
	}
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uu.mutation.FirstName(); ok {
		if err := user.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "User.first_name": %w`, err)}
		}
	}
	if v, ok := uu.mutation.LastName(); ok {
		if err := user.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "User.last_name": %w`, err)}
		}
	}
	if v, ok := uu.mutation.BusinessName(); ok {
		if err := user.BusinessNameValidator(v); err != nil {
			return &ValidationError{Name: "business_name", err: fmt.Errorf(`ent: validator failed for field "User.business_name": %w`, err)}
		}
	}
	if v, ok := uu.mutation.PhoneNumber(); ok {
		if err := user.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "User.phone_number": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Address(); ok {
		if err := user.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "User.address": %w`, err)}
		}
	}
	if v, ok := uu.mutation.City(); ok {
		if err := user.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "User.city": %w`, err)}
		}
	}
	if v, ok := uu.mutation.State(); ok {
		if err := user.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "User.state": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Zipcode(); ok {
		if err := user.ZipcodeValidator(v); err != nil {
			return &ValidationError{Name: "zipcode", err: fmt.Errorf(`ent: validator failed for field "User.zipcode": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "User.password": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UUID(); ok {
		_spec.SetField(user.FieldUUID, field.TypeString, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if value, ok := uu.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if value, ok := uu.mutation.BusinessName(); ok {
		_spec.SetField(user.FieldBusinessName, field.TypeString, value)
	}
	if value, ok := uu.mutation.PhoneNumber(); ok {
		_spec.SetField(user.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := uu.mutation.Address(); ok {
		_spec.SetField(user.FieldAddress, field.TypeString, value)
	}
	if value, ok := uu.mutation.City(); ok {
		_spec.SetField(user.FieldCity, field.TypeString, value)
	}
	if value, ok := uu.mutation.State(); ok {
		_spec.SetField(user.FieldState, field.TypeString, value)
	}
	if value, ok := uu.mutation.Zipcode(); ok {
		_spec.SetField(user.FieldZipcode, field.TypeString, value)
	}
	if value, ok := uu.mutation.Categories(); ok {
		_spec.SetField(user.FieldCategories, field.TypeJSON, value)
	}
	if value, ok := uu.mutation.AppendedCategories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldCategories, value)
		})
	}
	if uu.mutation.CategoriesCleared() {
		_spec.ClearField(user.FieldCategories, field.TypeJSON)
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uu.mutation.SavedVendors(); ok {
		_spec.SetField(user.FieldSavedVendors, field.TypeJSON, value)
	}
	if value, ok := uu.mutation.AppendedSavedVendors(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldSavedVendors, value)
		})
	}
	if uu.mutation.SavedVendorsCleared() {
		_spec.ClearField(user.FieldSavedVendors, field.TypeJSON)
	}
	if value, ok := uu.mutation.IsVerified(); ok {
		_spec.SetField(user.FieldIsVerified, field.TypeBool, value)
	}
	if value, ok := uu.mutation.VerificationToken(); ok {
		_spec.SetField(user.FieldVerificationToken, field.TypeString, value)
	}
	if uu.mutation.VerificationTokenCleared() {
		_spec.ClearField(user.FieldVerificationToken, field.TypeString)
	}
	if value, ok := uu.mutation.TokenExpiration(); ok {
		_spec.SetField(user.FieldTokenExpiration, field.TypeTime, value)
	}
	if uu.mutation.TokenExpirationCleared() {
		_spec.ClearField(user.FieldTokenExpiration, field.TypeTime)
	}
	if value, ok := uu.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUUID sets the "uuid" field.
func (uuo *UserUpdateOne) SetUUID(s string) *UserUpdateOne {
	uuo.mutation.SetUUID(s)
	return uuo
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUUID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUUID(*s)
	}
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// SetFirstName sets the "first_name" field.
func (uuo *UserUpdateOne) SetFirstName(s string) *UserUpdateOne {
	uuo.mutation.SetFirstName(s)
	return uuo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFirstName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetFirstName(*s)
	}
	return uuo
}

// SetLastName sets the "last_name" field.
func (uuo *UserUpdateOne) SetLastName(s string) *UserUpdateOne {
	uuo.mutation.SetLastName(s)
	return uuo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLastName(*s)
	}
	return uuo
}

// SetBusinessName sets the "business_name" field.
func (uuo *UserUpdateOne) SetBusinessName(s string) *UserUpdateOne {
	uuo.mutation.SetBusinessName(s)
	return uuo
}

// SetNillableBusinessName sets the "business_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBusinessName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetBusinessName(*s)
	}
	return uuo
}

// SetPhoneNumber sets the "phone_number" field.
func (uuo *UserUpdateOne) SetPhoneNumber(s string) *UserUpdateOne {
	uuo.mutation.SetPhoneNumber(s)
	return uuo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhoneNumber(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPhoneNumber(*s)
	}
	return uuo
}

// SetAddress sets the "address" field.
func (uuo *UserUpdateOne) SetAddress(s string) *UserUpdateOne {
	uuo.mutation.SetAddress(s)
	return uuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAddress(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAddress(*s)
	}
	return uuo
}

// SetCity sets the "city" field.
func (uuo *UserUpdateOne) SetCity(s string) *UserUpdateOne {
	uuo.mutation.SetCity(s)
	return uuo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCity(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetCity(*s)
	}
	return uuo
}

// SetState sets the "state" field.
func (uuo *UserUpdateOne) SetState(s string) *UserUpdateOne {
	uuo.mutation.SetState(s)
	return uuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableState(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetState(*s)
	}
	return uuo
}

// SetZipcode sets the "zipcode" field.
func (uuo *UserUpdateOne) SetZipcode(s string) *UserUpdateOne {
	uuo.mutation.SetZipcode(s)
	return uuo
}

// SetNillableZipcode sets the "zipcode" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableZipcode(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetZipcode(*s)
	}
	return uuo
}

// SetCategories sets the "categories" field.
func (uuo *UserUpdateOne) SetCategories(s []string) *UserUpdateOne {
	uuo.mutation.SetCategories(s)
	return uuo
}

// AppendCategories appends s to the "categories" field.
func (uuo *UserUpdateOne) AppendCategories(s []string) *UserUpdateOne {
	uuo.mutation.AppendCategories(s)
	return uuo
}

// ClearCategories clears the value of the "categories" field.
func (uuo *UserUpdateOne) ClearCategories() *UserUpdateOne {
	uuo.mutation.ClearCategories()
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePassword(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPassword(*s)
	}
	return uuo
}

// SetSavedVendors sets the "saved_vendors" field.
func (uuo *UserUpdateOne) SetSavedVendors(s []string) *UserUpdateOne {
	uuo.mutation.SetSavedVendors(s)
	return uuo
}

// AppendSavedVendors appends s to the "saved_vendors" field.
func (uuo *UserUpdateOne) AppendSavedVendors(s []string) *UserUpdateOne {
	uuo.mutation.AppendSavedVendors(s)
	return uuo
}

// ClearSavedVendors clears the value of the "saved_vendors" field.
func (uuo *UserUpdateOne) ClearSavedVendors() *UserUpdateOne {
	uuo.mutation.ClearSavedVendors()
	return uuo
}

// SetIsVerified sets the "is_verified" field.
func (uuo *UserUpdateOne) SetIsVerified(b bool) *UserUpdateOne {
	uuo.mutation.SetIsVerified(b)
	return uuo
}

// SetNillableIsVerified sets the "is_verified" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsVerified(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsVerified(*b)
	}
	return uuo
}

// SetVerificationToken sets the "verification_token" field.
func (uuo *UserUpdateOne) SetVerificationToken(s string) *UserUpdateOne {
	uuo.mutation.SetVerificationToken(s)
	return uuo
}

// SetNillableVerificationToken sets the "verification_token" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableVerificationToken(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetVerificationToken(*s)
	}
	return uuo
}

// ClearVerificationToken clears the value of the "verification_token" field.
func (uuo *UserUpdateOne) ClearVerificationToken() *UserUpdateOne {
	uuo.mutation.ClearVerificationToken()
	return uuo
}

// SetTokenExpiration sets the "token_expiration" field.
func (uuo *UserUpdateOne) SetTokenExpiration(t time.Time) *UserUpdateOne {
	uuo.mutation.SetTokenExpiration(t)
	return uuo
}

// SetNillableTokenExpiration sets the "token_expiration" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTokenExpiration(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetTokenExpiration(*t)
	}
	return uuo
}

// ClearTokenExpiration clears the value of the "token_expiration" field.
func (uuo *UserUpdateOne) ClearTokenExpiration() *UserUpdateOne {
	uuo.mutation.ClearTokenExpiration()
	return uuo
}

// SetCreatedAt sets the "created_at" field.
func (uuo *UserUpdateOne) SetCreatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetCreatedAt(t)
	return uuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetCreatedAt(*t)
	}
	return uuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.FirstName(); ok {
		if err := user.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "User.first_name": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.LastName(); ok {
		if err := user.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "User.last_name": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.BusinessName(); ok {
		if err := user.BusinessNameValidator(v); err != nil {
			return &ValidationError{Name: "business_name", err: fmt.Errorf(`ent: validator failed for field "User.business_name": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.PhoneNumber(); ok {
		if err := user.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "User.phone_number": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Address(); ok {
		if err := user.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "User.address": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.City(); ok {
		if err := user.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "User.city": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.State(); ok {
		if err := user.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "User.state": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Zipcode(); ok {
		if err := user.ZipcodeValidator(v); err != nil {
			return &ValidationError{Name: "zipcode", err: fmt.Errorf(`ent: validator failed for field "User.zipcode": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "User.password": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UUID(); ok {
		_spec.SetField(user.FieldUUID, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.BusinessName(); ok {
		_spec.SetField(user.FieldBusinessName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.PhoneNumber(); ok {
		_spec.SetField(user.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Address(); ok {
		_spec.SetField(user.FieldAddress, field.TypeString, value)
	}
	if value, ok := uuo.mutation.City(); ok {
		_spec.SetField(user.FieldCity, field.TypeString, value)
	}
	if value, ok := uuo.mutation.State(); ok {
		_spec.SetField(user.FieldState, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Zipcode(); ok {
		_spec.SetField(user.FieldZipcode, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Categories(); ok {
		_spec.SetField(user.FieldCategories, field.TypeJSON, value)
	}
	if value, ok := uuo.mutation.AppendedCategories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldCategories, value)
		})
	}
	if uuo.mutation.CategoriesCleared() {
		_spec.ClearField(user.FieldCategories, field.TypeJSON)
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uuo.mutation.SavedVendors(); ok {
		_spec.SetField(user.FieldSavedVendors, field.TypeJSON, value)
	}
	if value, ok := uuo.mutation.AppendedSavedVendors(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldSavedVendors, value)
		})
	}
	if uuo.mutation.SavedVendorsCleared() {
		_spec.ClearField(user.FieldSavedVendors, field.TypeJSON)
	}
	if value, ok := uuo.mutation.IsVerified(); ok {
		_spec.SetField(user.FieldIsVerified, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.VerificationToken(); ok {
		_spec.SetField(user.FieldVerificationToken, field.TypeString, value)
	}
	if uuo.mutation.VerificationTokenCleared() {
		_spec.ClearField(user.FieldVerificationToken, field.TypeString)
	}
	if value, ok := uuo.mutation.TokenExpiration(); ok {
		_spec.SetField(user.FieldTokenExpiration, field.TypeTime, value)
	}
	if uuo.mutation.TokenExpirationCleared() {
		_spec.ClearField(user.FieldTokenExpiration, field.TypeTime)
	}
	if value, ok := uuo.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
