// Code generated by ent, DO NOT EDIT.

package vendor

import (
	"handl-server/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Vendor {
	return predicate.Vendor(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Vendor {
	return predicate.Vendor(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Vendor {
	return predicate.Vendor(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Vendor {
	return predicate.Vendor(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Vendor {
	return predicate.Vendor(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Vendor {
	return predicate.Vendor(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Vendor {
	return predicate.Vendor(sql.FieldLTE(FieldID, id))
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldUUID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldDescription, v))
}

// Website applies equality check predicate on the "website" field. It's identical to WebsiteEQ.
func Website(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldWebsite, v))
}

// Keywords applies equality check predicate on the "keywords" field. It's identical to KeywordsEQ.
func Keywords(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldKeywords, v))
}

// Categories applies equality check predicate on the "categories" field. It's identical to CategoriesEQ.
func Categories(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldCategories, v))
}

// Subcategories applies equality check predicate on the "subcategories" field. It's identical to SubcategoriesEQ.
func Subcategories(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldSubcategories, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldAddress, v))
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldCity, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldState, v))
}

// Zipcode applies equality check predicate on the "zipcode" field. It's identical to ZipcodeEQ.
func Zipcode(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldZipcode, v))
}

// PhoneNumber applies equality check predicate on the "phone_number" field. It's identical to PhoneNumberEQ.
func PhoneNumber(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldPhoneNumber, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldEmail, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldUpdatedAt, v))
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldUUID, v))
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNEQ(FieldUUID, v))
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldIn(FieldUUID, vs...))
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNotIn(FieldUUID, vs...))
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGT(FieldUUID, v))
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGTE(FieldUUID, v))
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLT(FieldUUID, v))
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLTE(FieldUUID, v))
}

// UUIDContains applies the Contains predicate on the "uuid" field.
func UUIDContains(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContains(FieldUUID, v))
}

// UUIDHasPrefix applies the HasPrefix predicate on the "uuid" field.
func UUIDHasPrefix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasPrefix(FieldUUID, v))
}

// UUIDHasSuffix applies the HasSuffix predicate on the "uuid" field.
func UUIDHasSuffix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasSuffix(FieldUUID, v))
}

// UUIDEqualFold applies the EqualFold predicate on the "uuid" field.
func UUIDEqualFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEqualFold(FieldUUID, v))
}

// UUIDContainsFold applies the ContainsFold predicate on the "uuid" field.
func UUIDContainsFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContainsFold(FieldUUID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Vendor {
	return predicate.Vendor(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Vendor {
	return predicate.Vendor(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContainsFold(FieldDescription, v))
}

// WebsiteEQ applies the EQ predicate on the "website" field.
func WebsiteEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldWebsite, v))
}

// WebsiteNEQ applies the NEQ predicate on the "website" field.
func WebsiteNEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNEQ(FieldWebsite, v))
}

// WebsiteIn applies the In predicate on the "website" field.
func WebsiteIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldIn(FieldWebsite, vs...))
}

// WebsiteNotIn applies the NotIn predicate on the "website" field.
func WebsiteNotIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNotIn(FieldWebsite, vs...))
}

// WebsiteGT applies the GT predicate on the "website" field.
func WebsiteGT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGT(FieldWebsite, v))
}

// WebsiteGTE applies the GTE predicate on the "website" field.
func WebsiteGTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGTE(FieldWebsite, v))
}

// WebsiteLT applies the LT predicate on the "website" field.
func WebsiteLT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLT(FieldWebsite, v))
}

// WebsiteLTE applies the LTE predicate on the "website" field.
func WebsiteLTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLTE(FieldWebsite, v))
}

// WebsiteContains applies the Contains predicate on the "website" field.
func WebsiteContains(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContains(FieldWebsite, v))
}

// WebsiteHasPrefix applies the HasPrefix predicate on the "website" field.
func WebsiteHasPrefix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasPrefix(FieldWebsite, v))
}

// WebsiteHasSuffix applies the HasSuffix predicate on the "website" field.
func WebsiteHasSuffix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasSuffix(FieldWebsite, v))
}

// WebsiteIsNil applies the IsNil predicate on the "website" field.
func WebsiteIsNil() predicate.Vendor {
	return predicate.Vendor(sql.FieldIsNull(FieldWebsite))
}

// WebsiteNotNil applies the NotNil predicate on the "website" field.
func WebsiteNotNil() predicate.Vendor {
	return predicate.Vendor(sql.FieldNotNull(FieldWebsite))
}

// WebsiteEqualFold applies the EqualFold predicate on the "website" field.
func WebsiteEqualFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEqualFold(FieldWebsite, v))
}

// WebsiteContainsFold applies the ContainsFold predicate on the "website" field.
func WebsiteContainsFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContainsFold(FieldWebsite, v))
}

// KeywordsEQ applies the EQ predicate on the "keywords" field.
func KeywordsEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldKeywords, v))
}

// KeywordsNEQ applies the NEQ predicate on the "keywords" field.
func KeywordsNEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNEQ(FieldKeywords, v))
}

// KeywordsIn applies the In predicate on the "keywords" field.
func KeywordsIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldIn(FieldKeywords, vs...))
}

// KeywordsNotIn applies the NotIn predicate on the "keywords" field.
func KeywordsNotIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNotIn(FieldKeywords, vs...))
}

// KeywordsGT applies the GT predicate on the "keywords" field.
func KeywordsGT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGT(FieldKeywords, v))
}

// KeywordsGTE applies the GTE predicate on the "keywords" field.
func KeywordsGTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGTE(FieldKeywords, v))
}

// KeywordsLT applies the LT predicate on the "keywords" field.
func KeywordsLT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLT(FieldKeywords, v))
}

// KeywordsLTE applies the LTE predicate on the "keywords" field.
func KeywordsLTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLTE(FieldKeywords, v))
}

// KeywordsContains applies the Contains predicate on the "keywords" field.
func KeywordsContains(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContains(FieldKeywords, v))
}

// KeywordsHasPrefix applies the HasPrefix predicate on the "keywords" field.
func KeywordsHasPrefix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasPrefix(FieldKeywords, v))
}

// KeywordsHasSuffix applies the HasSuffix predicate on the "keywords" field.
func KeywordsHasSuffix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasSuffix(FieldKeywords, v))
}

// KeywordsIsNil applies the IsNil predicate on the "keywords" field.
func KeywordsIsNil() predicate.Vendor {
	return predicate.Vendor(sql.FieldIsNull(FieldKeywords))
}

// KeywordsNotNil applies the NotNil predicate on the "keywords" field.
func KeywordsNotNil() predicate.Vendor {
	return predicate.Vendor(sql.FieldNotNull(FieldKeywords))
}

// KeywordsEqualFold applies the EqualFold predicate on the "keywords" field.
func KeywordsEqualFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEqualFold(FieldKeywords, v))
}

// KeywordsContainsFold applies the ContainsFold predicate on the "keywords" field.
func KeywordsContainsFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContainsFold(FieldKeywords, v))
}

// CategoriesEQ applies the EQ predicate on the "categories" field.
func CategoriesEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldCategories, v))
}

// CategoriesNEQ applies the NEQ predicate on the "categories" field.
func CategoriesNEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNEQ(FieldCategories, v))
}

// CategoriesIn applies the In predicate on the "categories" field.
func CategoriesIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldIn(FieldCategories, vs...))
}

// CategoriesNotIn applies the NotIn predicate on the "categories" field.
func CategoriesNotIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNotIn(FieldCategories, vs...))
}

// CategoriesGT applies the GT predicate on the "categories" field.
func CategoriesGT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGT(FieldCategories, v))
}

// CategoriesGTE applies the GTE predicate on the "categories" field.
func CategoriesGTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGTE(FieldCategories, v))
}

// CategoriesLT applies the LT predicate on the "categories" field.
func CategoriesLT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLT(FieldCategories, v))
}

// CategoriesLTE applies the LTE predicate on the "categories" field.
func CategoriesLTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLTE(FieldCategories, v))
}

// CategoriesContains applies the Contains predicate on the "categories" field.
func CategoriesContains(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContains(FieldCategories, v))
}

// CategoriesHasPrefix applies the HasPrefix predicate on the "categories" field.
func CategoriesHasPrefix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasPrefix(FieldCategories, v))
}

// CategoriesHasSuffix applies the HasSuffix predicate on the "categories" field.
func CategoriesHasSuffix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasSuffix(FieldCategories, v))
}

// CategoriesIsNil applies the IsNil predicate on the "categories" field.
func CategoriesIsNil() predicate.Vendor {
	return predicate.Vendor(sql.FieldIsNull(FieldCategories))
}

// CategoriesNotNil applies the NotNil predicate on the "categories" field.
func CategoriesNotNil() predicate.Vendor {
	return predicate.Vendor(sql.FieldNotNull(FieldCategories))
}

// CategoriesEqualFold applies the EqualFold predicate on the "categories" field.
func CategoriesEqualFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEqualFold(FieldCategories, v))
}

// CategoriesContainsFold applies the ContainsFold predicate on the "categories" field.
func CategoriesContainsFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContainsFold(FieldCategories, v))
}

// SubcategoriesEQ applies the EQ predicate on the "subcategories" field.
func SubcategoriesEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldSubcategories, v))
}

// SubcategoriesNEQ applies the NEQ predicate on the "subcategories" field.
func SubcategoriesNEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNEQ(FieldSubcategories, v))
}

// SubcategoriesIn applies the In predicate on the "subcategories" field.
func SubcategoriesIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldIn(FieldSubcategories, vs...))
}

// SubcategoriesNotIn applies the NotIn predicate on the "subcategories" field.
func SubcategoriesNotIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNotIn(FieldSubcategories, vs...))
}

// SubcategoriesGT applies the GT predicate on the "subcategories" field.
func SubcategoriesGT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGT(FieldSubcategories, v))
}

// SubcategoriesGTE applies the GTE predicate on the "subcategories" field.
func SubcategoriesGTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGTE(FieldSubcategories, v))
}

// SubcategoriesLT applies the LT predicate on the "subcategories" field.
func SubcategoriesLT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLT(FieldSubcategories, v))
}

// SubcategoriesLTE applies the LTE predicate on the "subcategories" field.
func SubcategoriesLTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLTE(FieldSubcategories, v))
}

// SubcategoriesContains applies the Contains predicate on the "subcategories" field.
func SubcategoriesContains(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContains(FieldSubcategories, v))
}

// SubcategoriesHasPrefix applies the HasPrefix predicate on the "subcategories" field.
func SubcategoriesHasPrefix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasPrefix(FieldSubcategories, v))
}

// SubcategoriesHasSuffix applies the HasSuffix predicate on the "subcategories" field.
func SubcategoriesHasSuffix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasSuffix(FieldSubcategories, v))
}

// SubcategoriesIsNil applies the IsNil predicate on the "subcategories" field.
func SubcategoriesIsNil() predicate.Vendor {
	return predicate.Vendor(sql.FieldIsNull(FieldSubcategories))
}

// SubcategoriesNotNil applies the NotNil predicate on the "subcategories" field.
func SubcategoriesNotNil() predicate.Vendor {
	return predicate.Vendor(sql.FieldNotNull(FieldSubcategories))
}

// SubcategoriesEqualFold applies the EqualFold predicate on the "subcategories" field.
func SubcategoriesEqualFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEqualFold(FieldSubcategories, v))
}

// SubcategoriesContainsFold applies the ContainsFold predicate on the "subcategories" field.
func SubcategoriesContainsFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContainsFold(FieldSubcategories, v))
}

// PeopleIsNil applies the IsNil predicate on the "people" field.
func PeopleIsNil() predicate.Vendor {
	return predicate.Vendor(sql.FieldIsNull(FieldPeople))
}

// PeopleNotNil applies the NotNil predicate on the "people" field.
func PeopleNotNil() predicate.Vendor {
	return predicate.Vendor(sql.FieldNotNull(FieldPeople))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressIsNil applies the IsNil predicate on the "address" field.
func AddressIsNil() predicate.Vendor {
	return predicate.Vendor(sql.FieldIsNull(FieldAddress))
}

// AddressNotNil applies the NotNil predicate on the "address" field.
func AddressNotNil() predicate.Vendor {
	return predicate.Vendor(sql.FieldNotNull(FieldAddress))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContainsFold(FieldAddress, v))
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldCity, v))
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNEQ(FieldCity, v))
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldIn(FieldCity, vs...))
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNotIn(FieldCity, vs...))
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGT(FieldCity, v))
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGTE(FieldCity, v))
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLT(FieldCity, v))
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLTE(FieldCity, v))
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContains(FieldCity, v))
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasPrefix(FieldCity, v))
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasSuffix(FieldCity, v))
}

// CityIsNil applies the IsNil predicate on the "city" field.
func CityIsNil() predicate.Vendor {
	return predicate.Vendor(sql.FieldIsNull(FieldCity))
}

// CityNotNil applies the NotNil predicate on the "city" field.
func CityNotNil() predicate.Vendor {
	return predicate.Vendor(sql.FieldNotNull(FieldCity))
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEqualFold(FieldCity, v))
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContainsFold(FieldCity, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLTE(FieldState, v))
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContains(FieldState, v))
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasPrefix(FieldState, v))
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasSuffix(FieldState, v))
}

// StateIsNil applies the IsNil predicate on the "state" field.
func StateIsNil() predicate.Vendor {
	return predicate.Vendor(sql.FieldIsNull(FieldState))
}

// StateNotNil applies the NotNil predicate on the "state" field.
func StateNotNil() predicate.Vendor {
	return predicate.Vendor(sql.FieldNotNull(FieldState))
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEqualFold(FieldState, v))
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContainsFold(FieldState, v))
}

// ZipcodeEQ applies the EQ predicate on the "zipcode" field.
func ZipcodeEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldZipcode, v))
}

// ZipcodeNEQ applies the NEQ predicate on the "zipcode" field.
func ZipcodeNEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNEQ(FieldZipcode, v))
}

// ZipcodeIn applies the In predicate on the "zipcode" field.
func ZipcodeIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldIn(FieldZipcode, vs...))
}

// ZipcodeNotIn applies the NotIn predicate on the "zipcode" field.
func ZipcodeNotIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNotIn(FieldZipcode, vs...))
}

// ZipcodeGT applies the GT predicate on the "zipcode" field.
func ZipcodeGT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGT(FieldZipcode, v))
}

// ZipcodeGTE applies the GTE predicate on the "zipcode" field.
func ZipcodeGTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGTE(FieldZipcode, v))
}

// ZipcodeLT applies the LT predicate on the "zipcode" field.
func ZipcodeLT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLT(FieldZipcode, v))
}

// ZipcodeLTE applies the LTE predicate on the "zipcode" field.
func ZipcodeLTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLTE(FieldZipcode, v))
}

// ZipcodeContains applies the Contains predicate on the "zipcode" field.
func ZipcodeContains(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContains(FieldZipcode, v))
}

// ZipcodeHasPrefix applies the HasPrefix predicate on the "zipcode" field.
func ZipcodeHasPrefix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasPrefix(FieldZipcode, v))
}

// ZipcodeHasSuffix applies the HasSuffix predicate on the "zipcode" field.
func ZipcodeHasSuffix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasSuffix(FieldZipcode, v))
}

// ZipcodeIsNil applies the IsNil predicate on the "zipcode" field.
func ZipcodeIsNil() predicate.Vendor {
	return predicate.Vendor(sql.FieldIsNull(FieldZipcode))
}

// ZipcodeNotNil applies the NotNil predicate on the "zipcode" field.
func ZipcodeNotNil() predicate.Vendor {
	return predicate.Vendor(sql.FieldNotNull(FieldZipcode))
}

// ZipcodeEqualFold applies the EqualFold predicate on the "zipcode" field.
func ZipcodeEqualFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEqualFold(FieldZipcode, v))
}

// ZipcodeContainsFold applies the ContainsFold predicate on the "zipcode" field.
func ZipcodeContainsFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContainsFold(FieldZipcode, v))
}

// PhoneNumberEQ applies the EQ predicate on the "phone_number" field.
func PhoneNumberEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldPhoneNumber, v))
}

// PhoneNumberNEQ applies the NEQ predicate on the "phone_number" field.
func PhoneNumberNEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNEQ(FieldPhoneNumber, v))
}

// PhoneNumberIn applies the In predicate on the "phone_number" field.
func PhoneNumberIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldIn(FieldPhoneNumber, vs...))
}

// PhoneNumberNotIn applies the NotIn predicate on the "phone_number" field.
func PhoneNumberNotIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNotIn(FieldPhoneNumber, vs...))
}

// PhoneNumberGT applies the GT predicate on the "phone_number" field.
func PhoneNumberGT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGT(FieldPhoneNumber, v))
}

// PhoneNumberGTE applies the GTE predicate on the "phone_number" field.
func PhoneNumberGTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGTE(FieldPhoneNumber, v))
}

// PhoneNumberLT applies the LT predicate on the "phone_number" field.
func PhoneNumberLT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLT(FieldPhoneNumber, v))
}

// PhoneNumberLTE applies the LTE predicate on the "phone_number" field.
func PhoneNumberLTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLTE(FieldPhoneNumber, v))
}

// PhoneNumberContains applies the Contains predicate on the "phone_number" field.
func PhoneNumberContains(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContains(FieldPhoneNumber, v))
}

// PhoneNumberHasPrefix applies the HasPrefix predicate on the "phone_number" field.
func PhoneNumberHasPrefix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasPrefix(FieldPhoneNumber, v))
}

// PhoneNumberHasSuffix applies the HasSuffix predicate on the "phone_number" field.
func PhoneNumberHasSuffix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasSuffix(FieldPhoneNumber, v))
}

// PhoneNumberIsNil applies the IsNil predicate on the "phone_number" field.
func PhoneNumberIsNil() predicate.Vendor {
	return predicate.Vendor(sql.FieldIsNull(FieldPhoneNumber))
}

// PhoneNumberNotNil applies the NotNil predicate on the "phone_number" field.
func PhoneNumberNotNil() predicate.Vendor {
	return predicate.Vendor(sql.FieldNotNull(FieldPhoneNumber))
}

// PhoneNumberEqualFold applies the EqualFold predicate on the "phone_number" field.
func PhoneNumberEqualFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEqualFold(FieldPhoneNumber, v))
}

// PhoneNumberContainsFold applies the ContainsFold predicate on the "phone_number" field.
func PhoneNumberContainsFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContainsFold(FieldPhoneNumber, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Vendor {
	return predicate.Vendor(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.Vendor {
	return predicate.Vendor(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.Vendor {
	return predicate.Vendor(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Vendor {
	return predicate.Vendor(sql.FieldContainsFold(FieldEmail, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Vendor {
	return predicate.Vendor(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Vendor {
	return predicate.Vendor(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Vendor {
	return predicate.Vendor(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Vendor {
	return predicate.Vendor(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Vendor {
	return predicate.Vendor(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Vendor {
	return predicate.Vendor(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Vendor {
	return predicate.Vendor(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Vendor {
	return predicate.Vendor(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Vendor {
	return predicate.Vendor(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Vendor {
	return predicate.Vendor(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Vendor {
	return predicate.Vendor(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Vendor {
	return predicate.Vendor(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Vendor {
	return predicate.Vendor(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Vendor {
	return predicate.Vendor(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Vendor {
	return predicate.Vendor(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Vendor) predicate.Vendor {
	return predicate.Vendor(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Vendor) predicate.Vendor {
	return predicate.Vendor(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Vendor) predicate.Vendor {
	return predicate.Vendor(sql.NotPredicates(p))
}
