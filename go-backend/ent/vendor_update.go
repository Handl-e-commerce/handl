// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"handl-server/ent/predicate"
	"handl-server/ent/vendor"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// VendorUpdate is the builder for updating Vendor entities.
type VendorUpdate struct {
	config
	hooks    []Hook
	mutation *VendorMutation
}

// Where appends a list predicates to the VendorUpdate builder.
func (vu *VendorUpdate) Where(ps ...predicate.Vendor) *VendorUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetUUID sets the "uuid" field.
func (vu *VendorUpdate) SetUUID(s string) *VendorUpdate {
	vu.mutation.SetUUID(s)
	return vu
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (vu *VendorUpdate) SetNillableUUID(s *string) *VendorUpdate {
	if s != nil {
		vu.SetUUID(*s)
	}
	return vu
}

// SetName sets the "name" field.
func (vu *VendorUpdate) SetName(s string) *VendorUpdate {
	vu.mutation.SetName(s)
	return vu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vu *VendorUpdate) SetNillableName(s *string) *VendorUpdate {
	if s != nil {
		vu.SetName(*s)
	}
	return vu
}

// SetDescription sets the "description" field.
func (vu *VendorUpdate) SetDescription(s string) *VendorUpdate {
	vu.mutation.SetDescription(s)
	return vu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vu *VendorUpdate) SetNillableDescription(s *string) *VendorUpdate {
	if s != nil {
		vu.SetDescription(*s)
	}
	return vu
}

// ClearDescription clears the value of the "description" field.
func (vu *VendorUpdate) ClearDescription() *VendorUpdate {
	vu.mutation.ClearDescription()
	return vu
}

// SetWebsite sets the "website" field.
func (vu *VendorUpdate) SetWebsite(s string) *VendorUpdate {
	vu.mutation.SetWebsite(s)
	return vu
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (vu *VendorUpdate) SetNillableWebsite(s *string) *VendorUpdate {
	if s != nil {
		vu.SetWebsite(*s)
	}
	return vu
}

// ClearWebsite clears the value of the "website" field.
func (vu *VendorUpdate) ClearWebsite() *VendorUpdate {
	vu.mutation.ClearWebsite()
	return vu
}

// SetKeywords sets the "keywords" field.
func (vu *VendorUpdate) SetKeywords(s string) *VendorUpdate {
	vu.mutation.SetKeywords(s)
	return vu
}

// SetNillableKeywords sets the "keywords" field if the given value is not nil.
func (vu *VendorUpdate) SetNillableKeywords(s *string) *VendorUpdate {
	if s != nil {
		vu.SetKeywords(*s)
	}
	return vu
}

// ClearKeywords clears the value of the "keywords" field.
func (vu *VendorUpdate) ClearKeywords() *VendorUpdate {
	vu.mutation.ClearKeywords()
	return vu
}

// SetCategories sets the "categories" field.
func (vu *VendorUpdate) SetCategories(s string) *VendorUpdate {
	vu.mutation.SetCategories(s)
	return vu
}

// SetNillableCategories sets the "categories" field if the given value is not nil.
func (vu *VendorUpdate) SetNillableCategories(s *string) *VendorUpdate {
	if s != nil {
		vu.SetCategories(*s)
	}
	return vu
}

// ClearCategories clears the value of the "categories" field.
func (vu *VendorUpdate) ClearCategories() *VendorUpdate {
	vu.mutation.ClearCategories()
	return vu
}

// SetSubcategories sets the "subcategories" field.
func (vu *VendorUpdate) SetSubcategories(s string) *VendorUpdate {
	vu.mutation.SetSubcategories(s)
	return vu
}

// SetNillableSubcategories sets the "subcategories" field if the given value is not nil.
func (vu *VendorUpdate) SetNillableSubcategories(s *string) *VendorUpdate {
	if s != nil {
		vu.SetSubcategories(*s)
	}
	return vu
}

// ClearSubcategories clears the value of the "subcategories" field.
func (vu *VendorUpdate) ClearSubcategories() *VendorUpdate {
	vu.mutation.ClearSubcategories()
	return vu
}

// SetPeople sets the "people" field.
func (vu *VendorUpdate) SetPeople(s []string) *VendorUpdate {
	vu.mutation.SetPeople(s)
	return vu
}

// AppendPeople appends s to the "people" field.
func (vu *VendorUpdate) AppendPeople(s []string) *VendorUpdate {
	vu.mutation.AppendPeople(s)
	return vu
}

// ClearPeople clears the value of the "people" field.
func (vu *VendorUpdate) ClearPeople() *VendorUpdate {
	vu.mutation.ClearPeople()
	return vu
}

// SetAddress sets the "address" field.
func (vu *VendorUpdate) SetAddress(s string) *VendorUpdate {
	vu.mutation.SetAddress(s)
	return vu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (vu *VendorUpdate) SetNillableAddress(s *string) *VendorUpdate {
	if s != nil {
		vu.SetAddress(*s)
	}
	return vu
}

// ClearAddress clears the value of the "address" field.
func (vu *VendorUpdate) ClearAddress() *VendorUpdate {
	vu.mutation.ClearAddress()
	return vu
}

// SetCity sets the "city" field.
func (vu *VendorUpdate) SetCity(s string) *VendorUpdate {
	vu.mutation.SetCity(s)
	return vu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (vu *VendorUpdate) SetNillableCity(s *string) *VendorUpdate {
	if s != nil {
		vu.SetCity(*s)
	}
	return vu
}

// ClearCity clears the value of the "city" field.
func (vu *VendorUpdate) ClearCity() *VendorUpdate {
	vu.mutation.ClearCity()
	return vu
}

// SetState sets the "state" field.
func (vu *VendorUpdate) SetState(s string) *VendorUpdate {
	vu.mutation.SetState(s)
	return vu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (vu *VendorUpdate) SetNillableState(s *string) *VendorUpdate {
	if s != nil {
		vu.SetState(*s)
	}
	return vu
}

// ClearState clears the value of the "state" field.
func (vu *VendorUpdate) ClearState() *VendorUpdate {
	vu.mutation.ClearState()
	return vu
}

// SetZipcode sets the "zipcode" field.
func (vu *VendorUpdate) SetZipcode(s string) *VendorUpdate {
	vu.mutation.SetZipcode(s)
	return vu
}

// SetNillableZipcode sets the "zipcode" field if the given value is not nil.
func (vu *VendorUpdate) SetNillableZipcode(s *string) *VendorUpdate {
	if s != nil {
		vu.SetZipcode(*s)
	}
	return vu
}

// ClearZipcode clears the value of the "zipcode" field.
func (vu *VendorUpdate) ClearZipcode() *VendorUpdate {
	vu.mutation.ClearZipcode()
	return vu
}

// SetPhoneNumber sets the "phone_number" field.
func (vu *VendorUpdate) SetPhoneNumber(s string) *VendorUpdate {
	vu.mutation.SetPhoneNumber(s)
	return vu
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (vu *VendorUpdate) SetNillablePhoneNumber(s *string) *VendorUpdate {
	if s != nil {
		vu.SetPhoneNumber(*s)
	}
	return vu
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (vu *VendorUpdate) ClearPhoneNumber() *VendorUpdate {
	vu.mutation.ClearPhoneNumber()
	return vu
}

// SetEmail sets the "email" field.
func (vu *VendorUpdate) SetEmail(s string) *VendorUpdate {
	vu.mutation.SetEmail(s)
	return vu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (vu *VendorUpdate) SetNillableEmail(s *string) *VendorUpdate {
	if s != nil {
		vu.SetEmail(*s)
	}
	return vu
}

// ClearEmail clears the value of the "email" field.
func (vu *VendorUpdate) ClearEmail() *VendorUpdate {
	vu.mutation.ClearEmail()
	return vu
}

// SetCreatedAt sets the "created_at" field.
func (vu *VendorUpdate) SetCreatedAt(t time.Time) *VendorUpdate {
	vu.mutation.SetCreatedAt(t)
	return vu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vu *VendorUpdate) SetNillableCreatedAt(t *time.Time) *VendorUpdate {
	if t != nil {
		vu.SetCreatedAt(*t)
	}
	return vu
}

// SetUpdatedAt sets the "updated_at" field.
func (vu *VendorUpdate) SetUpdatedAt(t time.Time) *VendorUpdate {
	vu.mutation.SetUpdatedAt(t)
	return vu
}

// Mutation returns the VendorMutation object of the builder.
func (vu *VendorUpdate) Mutation() *VendorMutation {
	return vu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VendorUpdate) Save(ctx context.Context) (int, error) {
	vu.defaults()
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VendorUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VendorUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VendorUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vu *VendorUpdate) defaults() {
	if _, ok := vu.mutation.UpdatedAt(); !ok {
		v := vendor.UpdateDefaultUpdatedAt()
		vu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *VendorUpdate) check() error {
	if v, ok := vu.mutation.Name(); ok {
		if err := vendor.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Vendor.name": %w`, err)}
		}
	}
	if v, ok := vu.mutation.Description(); ok {
		if err := vendor.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Vendor.description": %w`, err)}
		}
	}
	return nil
}

func (vu *VendorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(vendor.Table, vendor.Columns, sqlgraph.NewFieldSpec(vendor.FieldID, field.TypeInt))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.UUID(); ok {
		_spec.SetField(vendor.FieldUUID, field.TypeString, value)
	}
	if value, ok := vu.mutation.Name(); ok {
		_spec.SetField(vendor.FieldName, field.TypeString, value)
	}
	if value, ok := vu.mutation.Description(); ok {
		_spec.SetField(vendor.FieldDescription, field.TypeString, value)
	}
	if vu.mutation.DescriptionCleared() {
		_spec.ClearField(vendor.FieldDescription, field.TypeString)
	}
	if value, ok := vu.mutation.Website(); ok {
		_spec.SetField(vendor.FieldWebsite, field.TypeString, value)
	}
	if vu.mutation.WebsiteCleared() {
		_spec.ClearField(vendor.FieldWebsite, field.TypeString)
	}
	if value, ok := vu.mutation.Keywords(); ok {
		_spec.SetField(vendor.FieldKeywords, field.TypeString, value)
	}
	if vu.mutation.KeywordsCleared() {
		_spec.ClearField(vendor.FieldKeywords, field.TypeString)
	}
	if value, ok := vu.mutation.Categories(); ok {
		_spec.SetField(vendor.FieldCategories, field.TypeString, value)
	}
	if vu.mutation.CategoriesCleared() {
		_spec.ClearField(vendor.FieldCategories, field.TypeString)
	}
	if value, ok := vu.mutation.Subcategories(); ok {
		_spec.SetField(vendor.FieldSubcategories, field.TypeString, value)
	}
	if vu.mutation.SubcategoriesCleared() {
		_spec.ClearField(vendor.FieldSubcategories, field.TypeString)
	}
	if value, ok := vu.mutation.People(); ok {
		_spec.SetField(vendor.FieldPeople, field.TypeJSON, value)
	}
	if value, ok := vu.mutation.AppendedPeople(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, vendor.FieldPeople, value)
		})
	}
	if vu.mutation.PeopleCleared() {
		_spec.ClearField(vendor.FieldPeople, field.TypeJSON)
	}
	if value, ok := vu.mutation.Address(); ok {
		_spec.SetField(vendor.FieldAddress, field.TypeString, value)
	}
	if vu.mutation.AddressCleared() {
		_spec.ClearField(vendor.FieldAddress, field.TypeString)
	}
	if value, ok := vu.mutation.City(); ok {
		_spec.SetField(vendor.FieldCity, field.TypeString, value)
	}
	if vu.mutation.CityCleared() {
		_spec.ClearField(vendor.FieldCity, field.TypeString)
	}
	if value, ok := vu.mutation.State(); ok {
		_spec.SetField(vendor.FieldState, field.TypeString, value)
	}
	if vu.mutation.StateCleared() {
		_spec.ClearField(vendor.FieldState, field.TypeString)
	}
	if value, ok := vu.mutation.Zipcode(); ok {
		_spec.SetField(vendor.FieldZipcode, field.TypeString, value)
	}
	if vu.mutation.ZipcodeCleared() {
		_spec.ClearField(vendor.FieldZipcode, field.TypeString)
	}
	if value, ok := vu.mutation.PhoneNumber(); ok {
		_spec.SetField(vendor.FieldPhoneNumber, field.TypeString, value)
	}
	if vu.mutation.PhoneNumberCleared() {
		_spec.ClearField(vendor.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := vu.mutation.Email(); ok {
		_spec.SetField(vendor.FieldEmail, field.TypeString, value)
	}
	if vu.mutation.EmailCleared() {
		_spec.ClearField(vendor.FieldEmail, field.TypeString)
	}
	if value, ok := vu.mutation.CreatedAt(); ok {
		_spec.SetField(vendor.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := vu.mutation.UpdatedAt(); ok {
		_spec.SetField(vendor.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vendor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VendorUpdateOne is the builder for updating a single Vendor entity.
type VendorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VendorMutation
}

// SetUUID sets the "uuid" field.
func (vuo *VendorUpdateOne) SetUUID(s string) *VendorUpdateOne {
	vuo.mutation.SetUUID(s)
	return vuo
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (vuo *VendorUpdateOne) SetNillableUUID(s *string) *VendorUpdateOne {
	if s != nil {
		vuo.SetUUID(*s)
	}
	return vuo
}

// SetName sets the "name" field.
func (vuo *VendorUpdateOne) SetName(s string) *VendorUpdateOne {
	vuo.mutation.SetName(s)
	return vuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (vuo *VendorUpdateOne) SetNillableName(s *string) *VendorUpdateOne {
	if s != nil {
		vuo.SetName(*s)
	}
	return vuo
}

// SetDescription sets the "description" field.
func (vuo *VendorUpdateOne) SetDescription(s string) *VendorUpdateOne {
	vuo.mutation.SetDescription(s)
	return vuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (vuo *VendorUpdateOne) SetNillableDescription(s *string) *VendorUpdateOne {
	if s != nil {
		vuo.SetDescription(*s)
	}
	return vuo
}

// ClearDescription clears the value of the "description" field.
func (vuo *VendorUpdateOne) ClearDescription() *VendorUpdateOne {
	vuo.mutation.ClearDescription()
	return vuo
}

// SetWebsite sets the "website" field.
func (vuo *VendorUpdateOne) SetWebsite(s string) *VendorUpdateOne {
	vuo.mutation.SetWebsite(s)
	return vuo
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (vuo *VendorUpdateOne) SetNillableWebsite(s *string) *VendorUpdateOne {
	if s != nil {
		vuo.SetWebsite(*s)
	}
	return vuo
}

// ClearWebsite clears the value of the "website" field.
func (vuo *VendorUpdateOne) ClearWebsite() *VendorUpdateOne {
	vuo.mutation.ClearWebsite()
	return vuo
}

// SetKeywords sets the "keywords" field.
func (vuo *VendorUpdateOne) SetKeywords(s string) *VendorUpdateOne {
	vuo.mutation.SetKeywords(s)
	return vuo
}

// SetNillableKeywords sets the "keywords" field if the given value is not nil.
func (vuo *VendorUpdateOne) SetNillableKeywords(s *string) *VendorUpdateOne {
	if s != nil {
		vuo.SetKeywords(*s)
	}
	return vuo
}

// ClearKeywords clears the value of the "keywords" field.
func (vuo *VendorUpdateOne) ClearKeywords() *VendorUpdateOne {
	vuo.mutation.ClearKeywords()
	return vuo
}

// SetCategories sets the "categories" field.
func (vuo *VendorUpdateOne) SetCategories(s string) *VendorUpdateOne {
	vuo.mutation.SetCategories(s)
	return vuo
}

// SetNillableCategories sets the "categories" field if the given value is not nil.
func (vuo *VendorUpdateOne) SetNillableCategories(s *string) *VendorUpdateOne {
	if s != nil {
		vuo.SetCategories(*s)
	}
	return vuo
}

// ClearCategories clears the value of the "categories" field.
func (vuo *VendorUpdateOne) ClearCategories() *VendorUpdateOne {
	vuo.mutation.ClearCategories()
	return vuo
}

// SetSubcategories sets the "subcategories" field.
func (vuo *VendorUpdateOne) SetSubcategories(s string) *VendorUpdateOne {
	vuo.mutation.SetSubcategories(s)
	return vuo
}

// SetNillableSubcategories sets the "subcategories" field if the given value is not nil.
func (vuo *VendorUpdateOne) SetNillableSubcategories(s *string) *VendorUpdateOne {
	if s != nil {
		vuo.SetSubcategories(*s)
	}
	return vuo
}

// ClearSubcategories clears the value of the "subcategories" field.
func (vuo *VendorUpdateOne) ClearSubcategories() *VendorUpdateOne {
	vuo.mutation.ClearSubcategories()
	return vuo
}

// SetPeople sets the "people" field.
func (vuo *VendorUpdateOne) SetPeople(s []string) *VendorUpdateOne {
	vuo.mutation.SetPeople(s)
	return vuo
}

// AppendPeople appends s to the "people" field.
func (vuo *VendorUpdateOne) AppendPeople(s []string) *VendorUpdateOne {
	vuo.mutation.AppendPeople(s)
	return vuo
}

// ClearPeople clears the value of the "people" field.
func (vuo *VendorUpdateOne) ClearPeople() *VendorUpdateOne {
	vuo.mutation.ClearPeople()
	return vuo
}

// SetAddress sets the "address" field.
func (vuo *VendorUpdateOne) SetAddress(s string) *VendorUpdateOne {
	vuo.mutation.SetAddress(s)
	return vuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (vuo *VendorUpdateOne) SetNillableAddress(s *string) *VendorUpdateOne {
	if s != nil {
		vuo.SetAddress(*s)
	}
	return vuo
}

// ClearAddress clears the value of the "address" field.
func (vuo *VendorUpdateOne) ClearAddress() *VendorUpdateOne {
	vuo.mutation.ClearAddress()
	return vuo
}

// SetCity sets the "city" field.
func (vuo *VendorUpdateOne) SetCity(s string) *VendorUpdateOne {
	vuo.mutation.SetCity(s)
	return vuo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (vuo *VendorUpdateOne) SetNillableCity(s *string) *VendorUpdateOne {
	if s != nil {
		vuo.SetCity(*s)
	}
	return vuo
}

// ClearCity clears the value of the "city" field.
func (vuo *VendorUpdateOne) ClearCity() *VendorUpdateOne {
	vuo.mutation.ClearCity()
	return vuo
}

// SetState sets the "state" field.
func (vuo *VendorUpdateOne) SetState(s string) *VendorUpdateOne {
	vuo.mutation.SetState(s)
	return vuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (vuo *VendorUpdateOne) SetNillableState(s *string) *VendorUpdateOne {
	if s != nil {
		vuo.SetState(*s)
	}
	return vuo
}

// ClearState clears the value of the "state" field.
func (vuo *VendorUpdateOne) ClearState() *VendorUpdateOne {
	vuo.mutation.ClearState()
	return vuo
}

// SetZipcode sets the "zipcode" field.
func (vuo *VendorUpdateOne) SetZipcode(s string) *VendorUpdateOne {
	vuo.mutation.SetZipcode(s)
	return vuo
}

// SetNillableZipcode sets the "zipcode" field if the given value is not nil.
func (vuo *VendorUpdateOne) SetNillableZipcode(s *string) *VendorUpdateOne {
	if s != nil {
		vuo.SetZipcode(*s)
	}
	return vuo
}

// ClearZipcode clears the value of the "zipcode" field.
func (vuo *VendorUpdateOne) ClearZipcode() *VendorUpdateOne {
	vuo.mutation.ClearZipcode()
	return vuo
}

// SetPhoneNumber sets the "phone_number" field.
func (vuo *VendorUpdateOne) SetPhoneNumber(s string) *VendorUpdateOne {
	vuo.mutation.SetPhoneNumber(s)
	return vuo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (vuo *VendorUpdateOne) SetNillablePhoneNumber(s *string) *VendorUpdateOne {
	if s != nil {
		vuo.SetPhoneNumber(*s)
	}
	return vuo
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (vuo *VendorUpdateOne) ClearPhoneNumber() *VendorUpdateOne {
	vuo.mutation.ClearPhoneNumber()
	return vuo
}

// SetEmail sets the "email" field.
func (vuo *VendorUpdateOne) SetEmail(s string) *VendorUpdateOne {
	vuo.mutation.SetEmail(s)
	return vuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (vuo *VendorUpdateOne) SetNillableEmail(s *string) *VendorUpdateOne {
	if s != nil {
		vuo.SetEmail(*s)
	}
	return vuo
}

// ClearEmail clears the value of the "email" field.
func (vuo *VendorUpdateOne) ClearEmail() *VendorUpdateOne {
	vuo.mutation.ClearEmail()
	return vuo
}

// SetCreatedAt sets the "created_at" field.
func (vuo *VendorUpdateOne) SetCreatedAt(t time.Time) *VendorUpdateOne {
	vuo.mutation.SetCreatedAt(t)
	return vuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vuo *VendorUpdateOne) SetNillableCreatedAt(t *time.Time) *VendorUpdateOne {
	if t != nil {
		vuo.SetCreatedAt(*t)
	}
	return vuo
}

// SetUpdatedAt sets the "updated_at" field.
func (vuo *VendorUpdateOne) SetUpdatedAt(t time.Time) *VendorUpdateOne {
	vuo.mutation.SetUpdatedAt(t)
	return vuo
}

// Mutation returns the VendorMutation object of the builder.
func (vuo *VendorUpdateOne) Mutation() *VendorMutation {
	return vuo.mutation
}

// Where appends a list predicates to the VendorUpdate builder.
func (vuo *VendorUpdateOne) Where(ps ...predicate.Vendor) *VendorUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VendorUpdateOne) Select(field string, fields ...string) *VendorUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Vendor entity.
func (vuo *VendorUpdateOne) Save(ctx context.Context) (*Vendor, error) {
	vuo.defaults()
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VendorUpdateOne) SaveX(ctx context.Context) *Vendor {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VendorUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VendorUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vuo *VendorUpdateOne) defaults() {
	if _, ok := vuo.mutation.UpdatedAt(); !ok {
		v := vendor.UpdateDefaultUpdatedAt()
		vuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VendorUpdateOne) check() error {
	if v, ok := vuo.mutation.Name(); ok {
		if err := vendor.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Vendor.name": %w`, err)}
		}
	}
	if v, ok := vuo.mutation.Description(); ok {
		if err := vendor.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Vendor.description": %w`, err)}
		}
	}
	return nil
}

func (vuo *VendorUpdateOne) sqlSave(ctx context.Context) (_node *Vendor, err error) {
	if err := vuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vendor.Table, vendor.Columns, sqlgraph.NewFieldSpec(vendor.FieldID, field.TypeInt))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Vendor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vendor.FieldID)
		for _, f := range fields {
			if !vendor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vendor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.UUID(); ok {
		_spec.SetField(vendor.FieldUUID, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Name(); ok {
		_spec.SetField(vendor.FieldName, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Description(); ok {
		_spec.SetField(vendor.FieldDescription, field.TypeString, value)
	}
	if vuo.mutation.DescriptionCleared() {
		_spec.ClearField(vendor.FieldDescription, field.TypeString)
	}
	if value, ok := vuo.mutation.Website(); ok {
		_spec.SetField(vendor.FieldWebsite, field.TypeString, value)
	}
	if vuo.mutation.WebsiteCleared() {
		_spec.ClearField(vendor.FieldWebsite, field.TypeString)
	}
	if value, ok := vuo.mutation.Keywords(); ok {
		_spec.SetField(vendor.FieldKeywords, field.TypeString, value)
	}
	if vuo.mutation.KeywordsCleared() {
		_spec.ClearField(vendor.FieldKeywords, field.TypeString)
	}
	if value, ok := vuo.mutation.Categories(); ok {
		_spec.SetField(vendor.FieldCategories, field.TypeString, value)
	}
	if vuo.mutation.CategoriesCleared() {
		_spec.ClearField(vendor.FieldCategories, field.TypeString)
	}
	if value, ok := vuo.mutation.Subcategories(); ok {
		_spec.SetField(vendor.FieldSubcategories, field.TypeString, value)
	}
	if vuo.mutation.SubcategoriesCleared() {
		_spec.ClearField(vendor.FieldSubcategories, field.TypeString)
	}
	if value, ok := vuo.mutation.People(); ok {
		_spec.SetField(vendor.FieldPeople, field.TypeJSON, value)
	}
	if value, ok := vuo.mutation.AppendedPeople(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, vendor.FieldPeople, value)
		})
	}
	if vuo.mutation.PeopleCleared() {
		_spec.ClearField(vendor.FieldPeople, field.TypeJSON)
	}
	if value, ok := vuo.mutation.Address(); ok {
		_spec.SetField(vendor.FieldAddress, field.TypeString, value)
	}
	if vuo.mutation.AddressCleared() {
		_spec.ClearField(vendor.FieldAddress, field.TypeString)
	}
	if value, ok := vuo.mutation.City(); ok {
		_spec.SetField(vendor.FieldCity, field.TypeString, value)
	}
	if vuo.mutation.CityCleared() {
		_spec.ClearField(vendor.FieldCity, field.TypeString)
	}
	if value, ok := vuo.mutation.State(); ok {
		_spec.SetField(vendor.FieldState, field.TypeString, value)
	}
	if vuo.mutation.StateCleared() {
		_spec.ClearField(vendor.FieldState, field.TypeString)
	}
	if value, ok := vuo.mutation.Zipcode(); ok {
		_spec.SetField(vendor.FieldZipcode, field.TypeString, value)
	}
	if vuo.mutation.ZipcodeCleared() {
		_spec.ClearField(vendor.FieldZipcode, field.TypeString)
	}
	if value, ok := vuo.mutation.PhoneNumber(); ok {
		_spec.SetField(vendor.FieldPhoneNumber, field.TypeString, value)
	}
	if vuo.mutation.PhoneNumberCleared() {
		_spec.ClearField(vendor.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := vuo.mutation.Email(); ok {
		_spec.SetField(vendor.FieldEmail, field.TypeString, value)
	}
	if vuo.mutation.EmailCleared() {
		_spec.ClearField(vendor.FieldEmail, field.TypeString)
	}
	if value, ok := vuo.mutation.CreatedAt(); ok {
		_spec.SetField(vendor.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := vuo.mutation.UpdatedAt(); ok {
		_spec.SetField(vendor.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Vendor{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vendor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
