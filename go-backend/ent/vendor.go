// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"handl-server/ent/vendor"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Vendor is the model entity for the Vendor schema.
type Vendor struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Website holds the value of the "website" field.
	Website *string `json:"website,omitempty"`
	// Keywords holds the value of the "keywords" field.
	Keywords *string `json:"keywords,omitempty"`
	// Categories holds the value of the "categories" field.
	Categories *string `json:"categories,omitempty"`
	// Subcategories holds the value of the "subcategories" field.
	Subcategories *string `json:"subcategories,omitempty"`
	// People holds the value of the "people" field.
	People []string `json:"people,omitempty"`
	// Address holds the value of the "address" field.
	Address *string `json:"address,omitempty"`
	// City holds the value of the "city" field.
	City *string `json:"city,omitempty"`
	// State holds the value of the "state" field.
	State *string `json:"state,omitempty"`
	// Zipcode holds the value of the "zipcode" field.
	Zipcode *string `json:"zipcode,omitempty"`
	// PhoneNumber holds the value of the "phone_number" field.
	PhoneNumber *string `json:"phone_number,omitempty"`
	// Email holds the value of the "email" field.
	Email *string `json:"email,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Vendor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case vendor.FieldPeople:
			values[i] = new([]byte)
		case vendor.FieldID:
			values[i] = new(sql.NullInt64)
		case vendor.FieldUUID, vendor.FieldName, vendor.FieldDescription, vendor.FieldWebsite, vendor.FieldKeywords, vendor.FieldCategories, vendor.FieldSubcategories, vendor.FieldAddress, vendor.FieldCity, vendor.FieldState, vendor.FieldZipcode, vendor.FieldPhoneNumber, vendor.FieldEmail:
			values[i] = new(sql.NullString)
		case vendor.FieldCreatedAt, vendor.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Vendor fields.
func (v *Vendor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vendor.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			v.ID = int(value.Int64)
		case vendor.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				v.UUID = value.String
			}
		case vendor.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				v.Name = value.String
			}
		case vendor.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				v.Description = new(string)
				*v.Description = value.String
			}
		case vendor.FieldWebsite:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field website", values[i])
			} else if value.Valid {
				v.Website = new(string)
				*v.Website = value.String
			}
		case vendor.FieldKeywords:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field keywords", values[i])
			} else if value.Valid {
				v.Keywords = new(string)
				*v.Keywords = value.String
			}
		case vendor.FieldCategories:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field categories", values[i])
			} else if value.Valid {
				v.Categories = new(string)
				*v.Categories = value.String
			}
		case vendor.FieldSubcategories:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subcategories", values[i])
			} else if value.Valid {
				v.Subcategories = new(string)
				*v.Subcategories = value.String
			}
		case vendor.FieldPeople:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field people", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &v.People); err != nil {
					return fmt.Errorf("unmarshal field people: %w", err)
				}
			}
		case vendor.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				v.Address = new(string)
				*v.Address = value.String
			}
		case vendor.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				v.City = new(string)
				*v.City = value.String
			}
		case vendor.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				v.State = new(string)
				*v.State = value.String
			}
		case vendor.FieldZipcode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field zipcode", values[i])
			} else if value.Valid {
				v.Zipcode = new(string)
				*v.Zipcode = value.String
			}
		case vendor.FieldPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number", values[i])
			} else if value.Valid {
				v.PhoneNumber = new(string)
				*v.PhoneNumber = value.String
			}
		case vendor.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				v.Email = new(string)
				*v.Email = value.String
			}
		case vendor.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				v.CreatedAt = value.Time
			}
		case vendor.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				v.UpdatedAt = value.Time
			}
		default:
			v.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Vendor.
// This includes values selected through modifiers, order, etc.
func (v *Vendor) Value(name string) (ent.Value, error) {
	return v.selectValues.Get(name)
}

// Update returns a builder for updating this Vendor.
// Note that you need to call Vendor.Unwrap() before calling this method if this Vendor
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Vendor) Update() *VendorUpdateOne {
	return NewVendorClient(v.config).UpdateOne(v)
}

// Unwrap unwraps the Vendor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Vendor) Unwrap() *Vendor {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Vendor is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Vendor) String() string {
	var builder strings.Builder
	builder.WriteString("Vendor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("uuid=")
	builder.WriteString(v.UUID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(v.Name)
	builder.WriteString(", ")
	if v := v.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := v.Website; v != nil {
		builder.WriteString("website=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := v.Keywords; v != nil {
		builder.WriteString("keywords=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := v.Categories; v != nil {
		builder.WriteString("categories=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := v.Subcategories; v != nil {
		builder.WriteString("subcategories=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("people=")
	builder.WriteString(fmt.Sprintf("%v", v.People))
	builder.WriteString(", ")
	if v := v.Address; v != nil {
		builder.WriteString("address=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := v.City; v != nil {
		builder.WriteString("city=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := v.State; v != nil {
		builder.WriteString("state=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := v.Zipcode; v != nil {
		builder.WriteString("zipcode=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := v.PhoneNumber; v != nil {
		builder.WriteString("phone_number=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := v.Email; v != nil {
		builder.WriteString("email=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(v.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(v.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Vendors is a parsable slice of Vendor.
type Vendors []*Vendor
